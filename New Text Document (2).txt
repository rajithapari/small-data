 


transaction:
select * from transaction t,accountdescriptor a where t.AccountId=a.AccountId  and t.AccountId="1357902468" and t.Status="PENDING";

select * from transaction t,accountdescriptor a where t.AccountId=a.AccountId and a.CustomerId="111111101"; 
 


2.

select * from transaction t,accountdescriptor a where t.AccountId=a.AccountId and a.CustomerId="111111101"; 




3.  
server.port=8888
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/stargate
spring.datasource.username=root
spring.datasource.password=root
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.jpa.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl 
 
We saved this conversation. You'll see it soon in the Conversations tab in Skype for Business and in the Conversation History folder in Outlook. 
[?9/?29/?2018 12:31 PM]  Walke, Ketan:  
[?9/?29/?2018 10:44 AM]  Walke, Ketan:  
select * from transaction t,accountdescriptor a where t.AccountId=a.AccountId and a.CustomerId="111111101"; 
  
 
4...
 
select * from transaction t,accountdescriptor a where t.AccountId=a.AccountId  and t.AccountId="1357902468" and t.Status="PENDING";

select * from transaction t,accountdescriptor a where t.AccountId=a.AccountId and a.CustomerId="111111101"; 
 
[?9/?29/?2018 2:17 PM]  Walke, Ketan:  
List<Transaction> fetchList(String accountId); 
@SuppressWarnings("unchecked")
	@Override
	public List<Transaction> fetchList(String accountId,String status) 
	{
		// TODO Auto-generated method stub
		
		System.out.println(accountId+"  "+status);
		Query query = entityManager.createNativeQuery("select * from transaction t,accountdescriptor a where t.AccountId=a.AccountId  and t.AccountId='accountId' and t.Status='status';", Transaction.class);
		/*query.setParameter(accountId, "accountId");
		query.setParameter(status, "status");*/
		System.out.println(" Result ::: " + query.getResultList());	
		
		
		return query.getResultList();
		
	} 
 5..
  
 @RequestMapping(value = "", method = RequestMethod.GET)
    public List<Transaction> getTransactionByAccountId(
        @PathVariable
        String accountId,@PathVariable String status) 
    {
    	AccountDescriptorRepository a=(AccountDescriptorRepository) accountDescriptorRepository.findByAccountId(accountId);
    	
    	
    	List<Transaction> transactionList=transactionRepository.fetchList(accountId, status);
    	return transactionList;
    
    } 
@SuppressWarnings("unchecked")
	@Override
	public List<Transaction> fetchList(String accountId, String status) {
		//System.out.println(accountId+"  "+status);
		Query query = entityManager.createNativeQuery("select * from transaction t,accountdescriptor a where t.AccountId=a.AccountId  and t.AccountId=? and t.Status=?;", Transaction.class);
		query.setParameter(1, accountId);
		query.setParameter(2, status);
		System.out.println(" Result ::: " + query.getResultList());	
		
		
		return query.getResultList();
	} 






my impl data here.......////////

	@Override
	public List<TransferStatus> fetchList(String transferId) 
	{
		
    @Query( value ="SELECT s.TransferId,s.ReferenceId,s.Status,s.TransferDate FROM  Stargate2018.transferStatus s  join Stargate2018.transfer t on   s.TransferId=t.TransferId Where t.TransferId='1112223334445556' ");
		return null;
	}
	

	 @RequestMapping(value="/transfer/status/{id}", method=RequestMethod.GET)  
	    public Optional<stargate2018> getUser(@PathVariable String id){  
	        returnuserService.getUser(id); 








Exception handling:------------/////

[?10/?3/?2018 5:27 PM]  Brahmankar, Kunal:  
try {
			if ((!(loanId.matches("\\d+"))) || loanId.matches(special)) {

				throw new BadRequestException("Bad Request");
			} else if (isLoanIdExist == 0) {
				throw new LoanIdNotFoundException("Not Found Loan Id");
			}

			else {
				return ResponseEntity.ok(investmentLoanService.fetchByLoanId(loanId));
			} 
} catch (LoanIdNotFoundException le) {

			return new CustomizedResponseEntityExceptionHandler().handleLoanAccountNotFoundException(le);

		} catch (BadRequestException bd) {

			return new CustomizedResponseEntityExceptionHandler().forBadRequest(bd);

		} catch (Exception ec) {

			return new CustomizedResponseEntityExceptionHandler().handleAllExceptions(ec);

		} 
 
..................



ramlPath>/src/main/resources/desingnapi.raml</ramlPath>

111222333444556

#[flowVars.transfer.status.transferId.{transferId}]


[flowVars.transferId];



...............





 
 
